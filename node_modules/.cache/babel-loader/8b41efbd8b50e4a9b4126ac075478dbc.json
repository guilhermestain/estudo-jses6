{"ast":null,"code":"// Regular expression used for basic parsing of the uuid.\nvar pattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n/**\n * Unparses a UUID buffer to a string. From node-uuid:\n * https://github.com/defunctzombie/node-uuid/blob/master/uuid.js\n *\n * Copyright (c) 2010-2012 Robert Kieffer\n * MIT License - http://opensource.org/licenses/mit-license.php\n *\n * @param  {Buffer} buf\n * @param  {Number=0} offset\n * @return {String}\n */\n\nvar _byteToHex = [];\n\nfor (var i = 0; i < 256; i++) {\n  _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction unparse(buf, offset) {\n  var i = offset || 0,\n      bth = _byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];\n}\n/**\n * Determines whether the uuid is valid, converting\n * it from a buffer if necessary.\n *\n * @param  {String|Buffer}  uuid\n * @param  {Number=}  version\n * @return {Boolean}\n */\n\n\nmodule.exports = function (uuid, version) {\n  var parsedUuid; // If the uuid is a biffer, parse it...\n\n  if (Buffer.isBuffer(uuid)) {\n    parsedUuid = unparse(uuid);\n  } // If it's a string, it's already good.\n  else if (Object.prototype.toString.call(uuid) === '[object String]') {\n      parsedUuid = uuid;\n    } // Otherwise, it's not valid.\n    else {\n        return false;\n      }\n\n  parsedUuid = parsedUuid.toLowerCase(); // All UUIDs fit a basic schema. Match that.\n\n  if (!pattern.test(parsedUuid)) {\n    return false;\n  } // Now extract the version...\n\n\n  if (version === undefined) {\n    version = extractVersion(parsedUuid);\n  } else if (extractVersion(parsedUuid) !== version) {\n    return false;\n  }\n\n  switch (version) {\n    // For certain versions, the checks we did up to this point are fine.\n    case 1:\n    case 2:\n      return true;\n    // For versions 3 and 4, they must specify a variant.\n\n    case 3:\n    case 4:\n    case 5:\n      return ['8', '9', 'a', 'b'].indexOf(parsedUuid.charAt(19)) !== -1;\n\n    default:\n      // We should only be able to reach this if the consumer explicitly\n      // provided an invalid version. Prior to extractVersion we check\n      // that it's 1-4 in the regex.\n      throw new Error('Invalid version provided.');\n  }\n};\n/**\n * Extracts the version from the UUID, which is (by definition) the M in\n * xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx\n *\n * @param  {String} uuid\n * @return {Number}\n */\n\n\nvar extractVersion = module.exports.version = function (uuid) {\n  return uuid.charAt(14) | 0;\n};","map":null,"metadata":{},"sourceType":"script"}