{"ast":null,"code":"// Blacklist common values.\nconst BLACKLIST = [\"00000000000000\", \"11111111111111\", \"22222222222222\", \"33333333333333\", \"44444444444444\", \"55555555555555\", \"66666666666666\", \"77777777777777\", \"88888888888888\", \"99999999999999\"];\nconst STRICT_STRIP_REGEX = /[-\\/.]/g;\nconst LOOSE_STRIP_REGEX = /[^\\d]/g;\n/**\n * Compute the Verifier Digit (or \"DÃ­gito Verificador (DV)\" in portuguese) for CNPJ.\n *\n * You can learn more about this on [wikipedia (pt-br)](https://pt.wikipedia.org/wiki/D%C3%ADgito_verificador)\n *\n * @export\n * @param {string} numbers the CNPJ string with only numbers.\n * @returns {number} the verifier digit.\n */\n\nexport function verifierDigit(numbers) {\n  let index = 2;\n  const reverse = numbers.split(\"\").reduce(function (buffer, number) {\n    return [parseInt(number, 10)].concat(buffer);\n  }, []);\n  const sum = reverse.reduce(function (buffer, number) {\n    buffer += number * index;\n    index = index === 9 ? 2 : index + 1;\n    return buffer;\n  }, 0);\n  const mod = sum % 11;\n  return mod < 2 ? 0 : 11 - mod;\n}\n/**\n * Transform the input into a pretty CNPJ format.\n *\n * Example:\n * ```\n * format('54550752000155');\n * // Result: '54.550.752/0001-55'\n * ```\n *\n * @export\n * @param {string} cnpj the CNPJ.\n * @returns {string} the formatted CNPJ.\n */\n\nexport function format(cnpj) {\n  return strip(cnpj).replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\n}\n/**\n * Remove some characters from the input.\n *\n * Example:\n * ```\n * strip('54550[752#0001..$55'); // Result: '54550752000155'\n * strip('54550[752#0001..$55', true); // Result: '54550[752#0001..$55' - Atention!\n * ```\n *\n * @export\n * @param {string} cnpj the CNPJ text.\n * @param {boolean} [isStrict] if `true`, it will remove only `.` and `-` characters.\n *                             Otherwise, it will remove all non-digit (`[^\\d]`) characters. Optional.\n * @returns {string} the stripped CNPJ.\n */\n\nexport function strip(cnpj, isStrict) {\n  const regex = isStrict ? STRICT_STRIP_REGEX : LOOSE_STRIP_REGEX;\n  return (cnpj || \"\").toString().replace(regex, \"\");\n}\n/**\n * Validate the CNPJ.\n *\n * @export\n * @param {string} cnpj the CNPJ number.\n * @param {boolean} [isStrict] if `true`, it will accept only `digits`, `.` and `-` characters. Optional.\n * @returns {boolean} `true` if CNPJ is valid. Otherwise, `false`.\n */\n\nexport function isValid(cnpj, isStrict) {\n  const stripped = strip(cnpj, isStrict); // CNPJ must be defined\n\n  if (!stripped) {\n    return false;\n  } // CNPJ must have 14 chars\n\n\n  if (stripped.length !== 14) {\n    return false;\n  } // CNPJ can't be blacklisted\n\n\n  if (BLACKLIST.includes(stripped)) {\n    return false;\n  }\n\n  let numbers = stripped.substr(0, 12);\n  numbers += verifierDigit(numbers);\n  numbers += verifierDigit(numbers);\n  return numbers.substr(-2) === stripped.substr(-2);\n}\n/**\n * Generate a random CNPJ.\n *\n * @export\n * @param {boolean} [useFormat] if `true`, it will format using `.` and `-`. Optional.\n * @returns {string} the CNPJ.\n */\n\nexport function generate(useFormat) {\n  let numbers = \"\";\n\n  for (let i = 0; i < 12; i += 1) {\n    numbers += Math.floor(Math.random() * 9);\n  }\n\n  numbers += verifierDigit(numbers);\n  numbers += verifierDigit(numbers);\n  return useFormat ? format(numbers) : numbers;\n}","map":null,"metadata":{},"sourceType":"module"}